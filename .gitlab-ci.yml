image: docker:latest
services:
  - docker:dind

stages:
  - sandbox-build
  - prod-build
  - docker-build
  - docker-build-release
  - deploy-sandbox
  - deploy-production
  - deploy-fallback

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  CI_REGISTRY_IMAGE: ebispot/gwas-curation-ui
  CURATION_UI_SERVICE_NAME: gwas-curation-ui

sandbox-build:
  image: node:14.15.5
  stage: sandbox-build
  script:
    - npm -v
    - node -v
    - rm -rf node_modules
    - npm install
    - CI=false npm run build -- --base-href=/gwas/depo-curation/ --configuration sandbox
  artifacts:
    paths:
      - dist/gwas-curation-ui/*
  only:
    - develop

prod-build:
  image: node:14.15.5
  stage: prod-build
  script:
    - npm -v
    - node -v
    - rm -rf node_modules
    - npm install
    - CI=false npm run build -- --base-href=/gwas/depo-curation/ --configuration production
  artifacts:
    paths:
      - dist/gwas-curation-ui/*
  except:
    - tags
    - develop

docker-build:
  stage: docker-build
  script:
  - echo "$DOCKER_HUB_PASSWORD" > dhpw.txt
  - docker login -u "${DOCKER_HUB_USER}" --password-stdin < dhpw.txt
  - docker build --force-rm=true -t $CURATION_UI_SERVICE_NAME:latest .
  - docker tag $CURATION_UI_SERVICE_NAME:latest $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  except:
  - tags

docker-build-release:
  variables:
    GIT_STRATEGY: none
  stage: docker-build-release
  script:
    - echo "$DOCKER_HUB_PASSWORD" > dhpw.txt
    - docker login -u "${DOCKER_HUB_USER}" --password-stdin < dhpw.txt
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  only:
    - tags

deploy-sandbox:
  image: dtzar/helm-kubectl:2.13.1
  stage: deploy-sandbox
  script:
    - echo "Deploy to sandbox server"
    - mkdir -p /root/.kube
    - echo ${SANBOX_KUBECONF} | base64 -d > /root/.kube/config
    - helm init --stable-repo-url https://charts.helm.sh/stable
    - helm delete --purge gwas-curation-ui || true
    - helm install --name gwas-curation-ui --set k8Namespace=gwas,image.repository=$CI_REGISTRY_IMAGE,image.tag=$CI_COMMIT_SHA ./k8chart/ --wait
  environment:
    name: sandbox
  only:
    - develop

deploy-fallback:
  image: dtzar/helm-kubectl:2.13.1
  stage: deploy-fallback
  script:
    - echo "Deploy to Production fallback server"
    - mkdir -p /root/.kube
    - echo ${PFALLBACK_KUBECONFIG} | base64 -d > /root/.kube/config
    - helm init --stable-repo-url https://charts.helm.sh/stable
    - helm delete --purge gwas-curation-ui || true
    - helm install --name gwas-curation-ui --set k8Namespace=gwas,replicaCount=1,image.repository=$CI_REGISTRY_IMAGE,image.tag=$CI_COMMIT_TAG ./k8chart/ --wait
  environment:
    name: production
  only:
    - tags

deploy-production:
  image: dtzar/helm-kubectl:2.13.1
  stage: deploy-production
  script:
    - echo "Deploy to Production server"
    - mkdir -p /root/.kube
    - echo ${PLIVE_KUBECONFIG} | base64 -d > /root/.kube/config
    - helm init --stable-repo-url https://charts.helm.sh/stable
    - helm delete --purge gwas-curation-ui || true
    - helm install --name gwas-curation-ui --set k8Namespace=gwas,replicaCount=1,image.repository=$CI_REGISTRY_IMAGE,image.tag=$CI_COMMIT_TAG ./k8chart/ --wait
  environment:
    name: production
  only:
    - tags

